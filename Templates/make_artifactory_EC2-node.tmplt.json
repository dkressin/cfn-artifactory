{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "AssignInstanceRole": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "InstanceProfile"
            },
            ""
          ]
        }
      ]
    },
    "AssignPublicIp": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "NoPublicIp"
            },
            "true"
          ]
        }
      ]
    },
    "CreateAppVolume": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AppVolumeDevice"
            },
            ""
          ]
        }
      ]
    },
    "CreateBackupVolume": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "BackupVolumeDevice"
            },
            ""
          ]
        }
      ]
    },
    "UseCfnUrl": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "CfnEndpointUrl"
            },
            ""
          ]
        }
      ]
    }
  },
  "Description": "This template deploys a standalone Linux instance to host a Artifactory node.",
  "Mappings": {},
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Script URLs"
          },
          "Parameters": [
            "ArtifactoryOsPrepScriptUrl",
            "ArtifactoryDbPropsScriptUrl",
            "ArtifactoryStorageScriptUrl",
            "ArtifactoryHaSetupScriptUrl",
            "ArtifactoryBkupScriptUrl"
          ]
        },
        {
          "Label": {
            "default": "Instance - Main Parameters"
          },
          "Parameters": [
            "AmiId",
            "InstanceType",
            "InstanceProfile",
            "InstanceRole",
            "ProvisionUser",
            "KeyPairName",
            "AdminPubkeyURL",
            "Hostname",
            "Domainname",
            "SecurityGroupIds",
            "SubnetIds",
            "NoPublicIp"
          ]
        },
        {
          "Label": {
            "default": "Instance - (Optional) Artifact Cache"
          },
          "Parameters": [
            "AppVolumeSize",
            "AppVolumeType",
            "AppVolumeDevice",
            "AppVolumeMountPath"
          ]
        },
        {
          "Label": {
            "default": "Instance - (Optional) Backup-Staging"
          },
          "Parameters": [
            "BackupVolumeSize",
            "BackupVolumeType",
            "BackupVolumeDevice",
            "BackupVolumeMountPath"
          ]
        },
        {
          "Label": {
            "default": "Database Connection Info"
          },
          "Parameters": [
            "ArtifactoryDbHost",
            "ArtifactoryDbPort",
            "ArtifactoryDbInst",
            "ArtifactoryDbAdmin",
            "ArtifactoryDbPassword"
          ]
        },
        {
          "Label": {
            "default": "Artifactory Parameters"
          },
          "Parameters": [
              "JfrogRepositoryName",
              "JfrogRepositoryUrl",
              "ArtifactoryRpm",
              "ArtifactoryHome",
              "ArtifactoryArtifactBucket",
              "ArtifactoryLicenseUrl",
              "ArtifactoryHaBundleUrl",
              "ArtifactoryIsHaMember",
              "ArtifactoryIsHaPrimary"
          ]
        },
        {
          "Label": {
            "default": "Miscellaneous"
          },
          "Parameters": [
            "PipIndexFips",
            "EpelRepo",
            "PipRpm",
            "PyStache",
            "CfnEndpointUrl"
          ]
        }
      ],
      "ParameterLabels": {
         "AdminPubkeyURL": {
           "default" : "Supplemental SSH Keys"
         },
         "AppVolumeSize": {
           "default" : "Artifactory Cache Size"
         },
         "AppVolumeMountPath": {
           "default" : "Artifactory Cache Location"
         },
         "ArtifactoryArtifactBucket": {
           "default" : "Artifact Bucket"
         },
         "ArtifactoryBkupScriptUrl": {
           "default" : "URL of backup script"
         },
         "ArtifactoryDbAdmin": {
           "default" : "Master database administrator"
         },
         "ArtifactoryDbHost": {
           "default" : "Remote database FQDN"
         },
         "ArtifactoryDbInst": {
           "default" : "Master database name"
         },
         "ArtifactoryDbPassword": {
           "default" : "Database administrator password"
         },
         "ArtifactoryDbPort": {
           "default" : "Remote database Port"
         },
         "ArtifactoryLicenseUrl": {
           "default" : "License-key URL"
         },
         "ArtifactoryOsPrepScriptUrl": {
           "default" : "OS prep-script URL"
         },
         "ArtifactoryHaSetupScriptUrl": {
           "default" : "HA node setup-script URL"
         },
         "ArtifactoryDbPropsScriptUrl": {
           "default" : "DB target-script URL"
         },
         "ArtifactoryHome": {
           "default" : "${ARTIFACTORY_HOME}"
         },
         "ArtifactoryHaBundleUrl": {
           "default" : "Node config bundle URL"
         },
         "ArtifactoryIsHaMember": {
           "default" : "Is cluster member"
         },
         "ArtifactoryIsHaPrimary": {
           "default" : "Is cluster primary"
         },
         "ArtifactoryRpm": {
           "default" : "Installation RPM"
         },
         "ArtifactoryStorageScriptUrl": {
           "default" : "Storage script URL"
         },
         "CfnEndpointUrl": {
           "default" : "Cloudformation Endpoint"
         },
         "Domainname": {
           "default" : "Artifactory DNS domain"
         },
         "EpelRepo": {
           "default" : "EPEL repository label"
         },
         "JfrogRepositoryName": {
           "default" : "Yum repository label"
         },
         "JfrogRepositoryUrl": {
           "default" : "Yum repository URL"
         },
         "KeyPairName": {
           "default" : "Default SSH Key"
         },
         "NoPublicIp": {
           "default" : "Disable Public IP"
         },
         "PipIndexFips": {
           "default" : "Pip Index"
         },
         "ProvisionUser": {
           "default" : "Default OS login-account"
         }
      }
    }
  },
  "Parameters": {
    "AdminPubkeyURL": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL the file containing the admin users' SSH public keys.",
      "Type": "String"
    },
    "AmiId": {
      "AllowedPattern": "^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$",
      "Description": "ID of the AMI to launch",
      "Type": "AWS::EC2::Image::Id"
    },
    "BackupVolumeDevice": {
      "AllowedValues": [
        "",
        "/dev/xvdk",
        "/dev/xvdl",
        "/dev/xvdm",
        "/dev/xvdn",
        "/dev/xvdo"
      ],
      "Default": "",
      "Description": "Device to mount an backup-staging location. Leave blank to launch without a backup-staging volume",
      "Type": "String"
    },
    "BackupVolumeMountPath": {
      "AllowedPattern": "/.*",
      "Default": "/var/backups",
      "Description": "Filesystem path to mount the backup-stageing volume. Ignored if \"BackupVolumeDevice\" is blank",
      "Type": "String"
    },
    "BackupVolumeSize": {
      "ConstraintDescription": "Must be between 1GB and 16384GB.",
      "Default": "10",
      "Description": "Size in GB of the EBS volume to create. Ignored if \"BackupVolumeDevice\" is blank",
      "MaxValue": "16384",
      "MinValue": "10",
      "Type": "Number"
    },
    "BackupVolumeType": {
      "AllowedValues": [
        "gp2",
        "io1",
        "sc1",
        "st1",
        "standard"
      ],
      "Default": "gp2",
      "Description": "Type of EBS volume to create. Ignored if \"BackupVolumeDevice\" is blank",
      "Type": "String"
    },
    "AppVolumeDevice": {
      "AllowedValues": [
        "",
        "/dev/xvdf",
        "/dev/xvdg",
        "/dev/xvdh",
        "/dev/xvdi",
        "/dev/xvdj"
      ],
      "Default": "",
      "Description": "Device to mount an extra EBS volume. Leave blank to launch without an extra application volume",
      "Type": "String"
    },
    "AppVolumeMountPath": {
      "AllowedPattern": "/.*",
      "Default": "/var/cache/artifactory",
      "Description": "Filesystem path to mount the extra app volume. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "AppVolumeSize": {
      "ConstraintDescription": "Must be between 1GB and 16384GB.",
      "Default": "10",
      "Description": "Size in GB of the EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "MaxValue": "16384",
      "MinValue": "10",
      "Type": "Number"
    },
    "AppVolumeType": {
      "AllowedValues": [
        "gp2",
        "io1",
        "sc1",
        "st1",
        "standard"
      ],
      "Default": "gp2",
      "Description": "Type of EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "ArtifactoryArtifactBucket": {
      "AllowedPattern": "^[a-z][a-z0-9-]*$",
      "Description": "S3 Bucket to host Artifactory's long-term artifact content.",
      "Type": "String"
    },
    "ArtifactoryBkupScriptUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "Cron-script for moving Artifactory backups to S3",
      "Type": "String"
    },
    "ArtifactoryDbAdmin": {
      "AllowedPattern": "[a-z0-9]{6,16}+",
      "ConstraintDescription": "Alphanumeric string between 6 and 12 characters.",
      "Description": "Remote PostGreSQL database's master user account.",
      "Type": "String"
    },
    "ArtifactoryDbHost": {
      "ConstraintDescription": "The RFC 1035 compliant FQDN of the remote PostGreSQL database host.",
      "Description": "The FQDN of the remote PostGreSQL database host.",
      "Type": "String"
    },
    "ArtifactoryDbInst": {
      "ConstraintDescription": "Alphanumeric string representing the name of the PostGreSQL schema-table.",
      "Description": "The name of the PostGreSQL schema-table.",
      "Type": "String"
    },
    "ArtifactoryDbPassword": {
      "ConstraintDescription": "A suitably-complex, alphanumeric string between 6 and 20 characters.",
      "Description": "Remote PostGreSQL database's master user's login password.",
      "Type": "String"
    },
    "ArtifactoryDbPort": {
      "ConstraintDescription": "Must be between 1024 and 61000.",
      "Default": "5432",
      "Description": "The port-number the remote PostGreSQL server is listening on.",
      "MaxValue": "61000",
      "MinValue": "1025",
      "Type": "Number"
    },
    "ArtifactoryDbPropsScriptUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to script that performs DB-client configuration actions for Artifactory",
      "Type": "String"
    },
    "ArtifactoryHaBundleUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "Url of Artifactory HA node bundle file.",
      "Type": "String"
    },
    "ArtifactoryHaSetupScriptUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to script that performs HA cluster configuration.",
      "Type": "String"
    },
    "ArtifactoryHome": {
      "ConstraintDescription": "An LSB-compliant, slash-delimited directory-path.",
      "Default": "/var/opt/jfrog/artifactory",
      "Description": "The root installation location for the Artifactory application.",
      "Type": "String"
    },
    "ArtifactoryIsHaMember": {
      "Description": "Whether instance is a member of an HA cluster.",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "true",
      "Type": "String"
    },
    "ArtifactoryIsHaPrimary": {
      "Description": "Whether instance is primary node in an HA cluster.",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "true",
      "Type": "String"
    },
    "Domainname": {
      "ConstraintDescription": "An alphanumeric string to complete the domain portion of the instance's FQDN.",
      "Description": "Suffix for Artifactory's hostname and DNS record",
      "Type": "String"
    },
    "Hostname": {
      "ConstraintDescription": "An alphanumeric string to complete the hostname portion of the instance's FQDN.",
      "Default": "artifactory",
      "Description": "Node-name for Artifactory's hostname and DNS record",
      "Type": "String"
    },
    "InstanceProfile": {
      "Description": "IAM instance profile to apply to the instance(s)",
      "Type": "String"
    },
    "InstanceRole": {
      "Description": "IAM instance role used to provide access to AWS resources",
      "Type": "String"
    },
    "ArtifactoryLicenseUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to Artifactory license file",
      "Type": "String"
    },
    "ArtifactoryOsPrepScriptUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to script that prepares the EC2 instance's host OS for installation of Artifactory",
      "Type": "String"
    },
    "ArtifactoryRpm": {
      "Default": "jfrog-artifactory-pro",
      "Description": "Name of the Artifactory installation-RPM.",
      "Type": "String"
    },
    "ArtifactoryStorageScriptUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to script that performs tiered-storage configuration actions for Artifactory",
      "Type": "String"
    },
    "CfnEndpointUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Default": "",
      "Description": "URL to the CloudFormation Endpoint. e.g. https://cloudformation.us-east-1.amazonaws.com",
      "Type": "String"
    },
    "EpelRepo": {
      "AllowedPattern": "^[a-z][a-z0-9-]*$",
      "ConstraintDescription": "An alphanumeric string that represents the EPEL yum repo's label.",
      "Default": "epel",
      "Description": "Name of network's EPEL repo.",
      "Type": "String"
    },
    "InstanceType": {
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m4.16xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge"
      ],
      "Default": "t2.large",
      "Description": "Amazon EC2 instance type",
      "Type": "String"
    },
    "JfrogRepositoryName": {
      "Default": "bintray--jfrog-artifactory-pro-rpms",
      "Description": "Name of the yum repository hosting Artifactory RPMs.",
      "Type": "String"
    },
    "JfrogRepositoryUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Default": "http://jfrog.bintray.com/artifactory-pro-rpms",
      "Description": "Base-URL of the yum repository hosting Artifactory RPMs.",
      "Type": "String"
    },
    "KeyPairName": {
      "Description": "Public/private key pairs allowing the provisioning-user to securely connect to the instance after it launches.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "NoPublicIp": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "true",
      "Description": "Controls whether to assign the instance a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
      "Type": "String"
    },
    "PipIndexFips": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Default": "https://pypi.org/simple/",
      "Description": "URL of pip index  that is compatible with FIPS 140-2 requirements.",
      "Type": "String"
    },
    "PipRpm": {
      "Default": "python2-pip",
      "Description": "Name of preferred pip RPM.",
      "Type": "String"
    },
    "ProvisionUser": {
      "AllowedPattern": "[a-z0-9]{6,12}+",
      "ConstraintDescription": "Alphanumeric string between 6 and 12 characters.",
      "Default": "artibuild",
      "Description": "Default login user account name.",
      "Type": "String"
    },
    "PyStache": {
      "Default": "pystache",
      "Description": "Name of preferred pystache RPM.",
      "Type": "String"
    },
    "SecurityGroupIds": {
      "Description": "List of security groups to apply to the instance(s)",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "SubnetIds": {
      "Description": "Subnet to associate to the Instance",
      "Type": "AWS::EC2::Subnet::Id"
    }
  },
  "Resources": {
    "ArtifactoryEC2": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT10M"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "role=",
                                {
                                  "Ref": "InstanceProfile"
                                },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "url=",
                                {
                                  "Ref": "CfnEndpointUrl"
                                },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      }
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.CfnLaunchConfig.Metadata\n",
                      "action=/opt/aws/bin/cfn-init -v -c update",
                      " --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      " --resource ArtifactoryEC2",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --role ",
                                {
                                  "Ref": "InstanceProfile"
                                }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                {
                                  "Ref": "CfnEndpointUrl"
                                }
                              ]
                            ]
                          },
                          ""
                        ]
                      }
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              }
            },
            "install-updates": {
              "commands": {
                "10-install-updates": {
                  "command": "yum update -y"
                }
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeSize": 20,
              "VolumeType": "gp2"
            }
          },
          {
            "Fn::If": [
              "CreateAppVolume",
              {
                "DeviceName": {
                  "Ref": "AppVolumeDevice"
                },
                "Ebs": {
                  "DeleteOnTermination": true,
                  "VolumeSize": {
                    "Ref": "AppVolumeSize"
                  },
                  "VolumeType": {
                    "Ref": "AppVolumeType"
                  }
                }
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Fn::If": [
              "CreateBackupVolume",
              {
                "DeviceName": {
                  "Ref": "BackupVolumeDevice"
                },
                "Ebs": {
                  "DeleteOnTermination": true,
                  "VolumeSize": {
                    "Ref": "BackupVolumeSize"
                  },
                  "VolumeType": {
                    "Ref": "BackupVolumeType"
                  }
                }
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "IamInstanceProfile": {
          "Fn::If": [
            "AssignInstanceRole",
            {
              "Ref": "InstanceProfile"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "ImageId": {
          "Ref": "AmiId"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": {
              "Fn::If": [
                "AssignPublicIp",
                true,
                false
              ]
            },
            "DeviceIndex": "0",
            "GroupSet": {
              "Ref": "SecurityGroupIds"
            },
            "SubnetId": {
              "Ref": "SubnetIds"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "\n",
                "system_info:\n",
                "  default_user:\n",
                "    name: ",
                {
                  "Ref": "ProvisionUser"
                },
                "\n",
                "\n",
                "hostname: ",
                {
                  "Ref": "Hostname"
                },
                "\n",
                "fqdn: ",
                {
                  "Ref": "Hostname"
                },
                ".",
                {
                  "Ref": "Domainname"
                },
                "\n",
                "manage_etc_hosts: true\n",
                "\n",
                "yum_repos:\n",
                "  ",
                {
                  "Ref": "JfrogRepositoryName"
                },
                ":\n",
                "    baseurl: ",
                {
                  "Ref": "JfrogRepositoryUrl"
                },
                "\n",
                "    enabled: true\n",
                "    gpgcheck: false\n",
                "    name: bintray--jfrog-artifactory-pro-rpms from BinTray\n",
                "\n",
                "bootcmd:\n",
                "  - cloud-init-per instance mkfs-appvolume mkfs -t ext4 ",
                {
                  "Ref": "AppVolumeDevice"
                },
                "\n",
                "  - cloud-init-per instance mkfs-bkupvolume mkfs -t ext4 ",
                {
                  "Ref": "BackupVolumeDevice"
                },
                "\n",
                "\n",
                "mounts:\n",
                "  - [ ",
                "\"",
                {
                  "Ref": "AppVolumeDevice"
                },
                "\", ",
                "\"",
                {
                  "Ref": "AppVolumeMountPath"
                },
                "\", ",
                "\"auto\" ",
                "]\n",
                "  - [ ",
                "\"",
                {
                  "Ref": "BackupVolumeDevice"
                },
                "\", ",
                "\"",
                {
                  "Ref": "BackupVolumeMountPath"
                },
                "\", ",
                "\"auto\" ",
                "]\n",
                "\n",
                "runcmd:\n",
                "  - |-\n",
                "      # FIPS-file\n",
                "      CHKFIPS=/proc/sys/crypto/fips_enabled\n",
                "      # Artifactory global-envs\n",
                "      export ARTIFACTORY_HOME=\"",
                {
                  "Ref": "ArtifactoryHome"
                },
                "\"\n",
                "      export ARTIFACTORY_ETC=\"${ARTIFACTORY_HOME}/etc\"\n",
                "      export ARTIFACTORY_LOGS=\"${ARTIFACTORY_HOME}/logs\"\n",
                "      export ARTIFACTORY_VARS=\"${ARTIFACTORY_HOME}/etc/default\"\n",
                "      export ARTIFACTORY_TOMCAT_HOME=\"${ARTIFACTORY_HOME}/tomcat\"\n",
                "      export ARTIFACTORY_CL_MMBR=\"",
                         { "Ref": "ArtifactoryIsHaMember" },
                         "\"\n",
                "      export ARTIFACTORY_CL_PRIM=\"",
                         { "Ref": "ArtifactoryIsHaPrimary" },
                         "\"\n",
                "      export ARTIFACTORY_HABUNDLE=\"",
                         { "Ref": "ArtifactoryHaBundleUrl" },
                         "\"\n",
                "      export ARTIFACTORY_DBINST=\"",
                {
                  "Ref": "ArtifactoryDbInst"
                },
                "\"\n",
                "      export ARTIFACTORY_DBUSER=\"",
                {
                  "Ref": "ArtifactoryDbAdmin"
                },
                "\"\n",
                "      export ARTIFACTORY_DBPASS=\"",
                {
                  "Ref": "ArtifactoryDbPassword"
                },
                "\"\n",
                "      export ARTIFACTORY_DBHOST=\"",
                {
                  "Ref": "ArtifactoryDbHost"
                },
                "\"\n",
                "      export ARTIFACTORY_DBPORT=\"",
                {
                  "Ref": "ArtifactoryDbPort"
                },
                "\"\n",
                "      \n",
                "      # For tiered-storage Setup\n",
                "      export ARTIFACTORY_BUCKET=\"",
                {
                  "Ref": "ArtifactoryArtifactBucket"
                },
                "\"\n",
                "      export ARTIFACTORY_ROLE=\"",
                {
                  "Ref": "InstanceRole"
                },
                "\"\n",
                "      \n",
                "      env | grep ARTIFACTORY > /root/AF.envs\n",
                "      \n",
                "      # Helper function\n",
                "      function err_exit {\n",
                "         echo \"${1}\"\n",
                "         logger -p kern.crit -t UserData \"${1}\"\n",
                "         /opt/aws/bin/cfn-signal -e 1 --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource ArtifactoryEC2\n",
                "         exit 1\n",
                "      }\n",
                "      \n",
                "      # Install RPMs needed by the cfn-tools.\n",
                "      yum --enablerepo=",
                {
                  "Ref": "EpelRepo"
                },
                " install -y ",
                {
                  "Ref": "PyStache"
                },
                " ",
                {
                  "Ref": "PipRpm"
                },
                " || err_exit 'Could not install Cfn dependencies.'\n",
                "    \n",
                "      # Initialize the Cfn subsystems\n",
                "      /opt/aws/bin/cfn-init -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -r ArtifactoryEC2 ",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " && echo 'Successfully ran cfn-init'",
                " || err_exit 'Failed to run cfn-init' > /dev/stderr\n",
                "    \n",
                "      # Export cert bundle ENVs\n",
                "      export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "      export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "      \n",
                "      # Do pip-stuff\n",
                "      pip install -i ",
                {
                  "Ref": "PipIndexFips"
                },
                " --upgrade pip\n",
                "      \n",
                "      # Add admin SSH keys to the ",
                {
                  "Ref": "ProvisionUser"
                },
                " account\n",
                "      export PROVHOME=/home/",
                     {
                       "Ref": "ProvisionUser"
                     },
                     "\n",
                "      if [[ ! -d ${PROVHOME}/.ssh ]]\n",
                "      then\n",
                "         printf \"Waiting for ${PROVHOME}/.ssh to be created\"\n",
                "         while [[ ! -d ${PROVHOME}/.ssh ]]\n",
                "         do\n",
                "            printf \".\"\n",
                "            sleep 5\n",
                "         done\n",
                "         echo \"Found.\"\n",
                "      fi\n",
                "      \n",
                "      curl -skL ",
                {
                  "Ref": "AdminPubkeyURL"
                },
                " >> ${PROVHOME}/.ssh/authorized_keys || ",
                "err_exit 'Failed to install admin-users keys'\n",
                "      \n",
                "      \n",
                "      # Stage license-key file\n",
                "      curl -o /tmp/artifactory.lic -skL ",
                {
                  "Ref": "ArtifactoryLicenseUrl"
                },
                " || err_exit \"Failed to grab license key.\"\n",
                "      \n",
                "      # Ensure PostGreSQL RPMs are installed\n",
                "      yum install -y postgresql postgresql-jdbc\n",
                "      \n",
                "      # Run OS-prep script\n",
                "      curl -skL ",
                {
                  "Ref": "ArtifactoryOsPrepScriptUrl"
                },
                " | tee OSprep.sh | bash || err_exit \"OS-prep script",
                " exited abnormally.\"\n",
                "      \n",
                "      # Install Artifactory RPM\n",
                "      yum install -y ",
                {
                  "Ref": "ArtifactoryRpm"
                },
                "\n",
                "      \n",
                "      # Install Enterprise license entitlements\n",
                "      install -b -m 640 -o artifactory -g artifactory ",
                       "/tmp/artifactory.lic ${ARTIFACTORY_ETC}/artifactory.lic ",
                       "|| err_exit \"Failed to install selected license-key.\"\n",
                "      \n",
                "      # Modify DB connections to point to RDS\n",
                "      curl -skL ",
                {
                  "Ref": "ArtifactoryDbPropsScriptUrl"
                },
                " | tee /root/dbsetup.sh | bash || err_exit \"DB-connector ",
                "script exited abnormally.\"\n",
                "      \n",
                "      # Ensure that Artifactory can use backups target\n",
                "      chown artifactory:artifactory ",
                {
                  "Ref": "BackupVolumeMountPath"
                },
                " || err_exit \"Failed to set correct ownership",
                " on the backup-staging filesystem.\"\n",
                "      \n",
                "      # Ensure that Artifactory can use CacheFS target\n",
                "      chown artifactory:artifactory ",
                {
                  "Ref": "AppVolumeMountPath"
                },
                " || err_exit \"Failed to set correct ownership",
                " on the artifact cache filesystem.\"\n",
                "      \n",
                "      # Configure S3-based tiered-storage\n",
                "      curl -skl ",
                {
                  "Ref": "ArtifactoryStorageScriptUrl"
                },
                " | tee /root/s3setup.sh | bash || err_exit \"Storage-",
                "tiering script failed to run to proper completion-state.\"\n",
                "      \n",
                "      # Configure HA membership info\n",
                "      curl -skl ",
                {
                  "Ref": "ArtifactoryHaSetupScriptUrl"
                },
                " | tee /root/ha-setup.sh | bash || err_exit \"HA ",
                "node configuration script failed to run to proper completion-state.\"\n",
                "      \n",
                "      # Install Artifactory Backup cron-script\n",
                "      curl -skL ",
                          { "Ref": "ArtifactoryBkupScriptUrl" },
                       " | sed 's/##ARTIFACTORY_BUCKET##/",
                          { "Ref": "ArtifactoryArtifactBucket" },
                       "/' > /usr/local/bin/stage2s3.sh\n",
                "      (crontab -l 2>/dev/null; echo \"",
                       "30 1 * * * /usr/local/bin/stage2s3.sh\")",
                       " | crontab -\n",
                "      chmod 755 /usr/local/bin/stage2s3.sh\n",
                "      \n",
                "      # Start Artifactory\n",
                "      setenforce 0\n",
                "      systemctl enable artifactory || err_exit ",
                       "'Failed to enable Artifactory'\n",
                "      systemctl start artifactory || err_exit ",
                       "'Failed to start Artifactory'\n",
                "      \n",
                "      if [[ -f \"${CHKFIPS}\" ]] &&",
                       " [[ $(grep -q '1' \"${CHKFIPS}\")$? -eq 0 ]]\n",
                "      then\n",
                "         echo 'Yanking FIPS dracut modules...'\n",
                "         yum -q remove -y dracut-fips\\* ||",
                          " err_exit 'Failed to remove FIPS kernel modules'\n",
                "         echo 'Moving aside FIPS-enabled intrafmfs files...'\n",
                "         mv -v /boot/initramfs-$(uname -r).img{,.FIPS-bak} ||",
                          " err_exit 'Failed to remove FIPS kernel modules'\n",
                "         echo 'Running dracut to update initramfs... '\n",
                "         dracut || err_exit 'Update of initramfs failed'\n",
                "         echo 'Updating GRUB options...'\n",
                "         grubby --update-kernel=ALL --remove-args=fips=1 ||",
                          " err_exit 'Update of grubby options failed'\n",
                "          [[ -f /etc/default/grub ]] && sed -i 's/ fips=1//'",
                          " /etc/default/grub || err_exit 'Update of default GRUB",
                          " options failed'\n",
                "         shutdown -r 1 'Rebooting in 60s to finish disabling FIPS.'\n",
                "      fi\n",
                "      \n",
                "      # Signal Cfn that we're good\n",
                "      /opt/aws/bin/cfn-signal -e 0 --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource ArtifactoryEC2 --url ",
                {
                  "Ref": "CfnEndpointUrl"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    }
  }
}
